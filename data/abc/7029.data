{'TMP': 'C:\\Users\\me\\AppData\\Local\\Temp', 'USERNAME': 'me', 'COMPUTERNAME': 'ME-TOSH', 'ILMDIR': 'C:\\Program Files (x86)\\Common Files\\Autodesk Shared\\Materials\\', 'VS110COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\Common7\\Tools\\', 'LIB': ';C:\\hla\\hlalib', 'USERDOMAIN': 'me-TOSH', 'HLALIB': 'C:\\hla\\hlalib', 'PSMODULEPATH': 'C:\\windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 42 Stepping 7, GenuineIntel', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'PROGRAMFILES': 'C:\\Program Files', 'PROCESSOR_REVISION': '2a07', 'PATH': 'C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Program Files (x86)\\Jahshaka\\..\\gtk2\\bin;C:\\Program Files (x86)\\Jahshaka\\..\\mlt\\bin;C:\\Program Files (x86)\\OpenLibraries\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Git\\mingw64\\bin;C:\\Program Files\\Git\\usr\\bin:C:\\Python36-32:C:\\Python36-32/Scripts;C:\\Program Files\\MySQL\\MySQL Utilities 1.6\\;C:\\Program Files (x86)\\Toshiba\\Bluetooth Toshiba Stack\\sys\\;C:\\Program Files (x86)\\Toshiba\\Bluetooth Toshiba Stack\\sys\\x64\\;C:\\Program Files\\nodejs\\;C:\\TDM-GCC-64\\bin;C:\\hla;C:\\Program Files\\PuTTY\\;C:\\Program Files\\Java\\jdk1.8.0_65\\bin;C:\\Users\\me\\AppData\\Roaming\\npm;C:\\Program Files (x86)\\Toshiba\\Bluetooth Toshiba Stack\\sys\\x64\\;C:\\Program Files\\nodejs\\;C:\\Program Files (x86)\\Nmap;C:\\ADB\\platform-tools;C:\\Python27\\lib\\site-packages\\pywin32_system32;C:\\Python27\\lib\\site-packages\\pywin32_system32', 'HOME': 'C:\\Users\\me', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'WINDOWS_TRACING_FLAGS': '3', 'TK_LIBRARY': 'C:\\Python27\\tcl\\tk8.5', 'WINDOWS_TRACING_LOGFILE': 'C:\\BVTBin\\Tests\\installpackage\\csilogfile.log', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'HLAINC': 'C:\\hla\\include', 'TIX_LIBRARY': 'C:\\Python27\\tcl\\tix8.4.3', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\me\\AppData\\Local', 'HOMEPATH': '\\Users\\me', 'VS120COMNTOOLS': 'C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\Common7\\Tools\\', 'CM2015DIR': 'C:\\Program Files (x86)\\Common Files\\Autodesk Shared\\Materials\\', 'XNAGSSHARED': 'C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\XNA\\', 'PROGRAMW6432': 'C:\\Program Files', 'NODE': 'C:\\Program Files\\nodejs', 'LOGONSERVER': '\\\\ME-TOSH', 'SYSTEMROOT': 'C:\\windows', 'SESSIONNAME': 'Console', 'PROGRAMDATA': 'C:\\ProgramData', 'PYTHONPATH': 'C:\\Program Files (x86)\\OpenLibraries\\python', 'TCL_LIBRARY': 'C:\\Python27\\tcl\\tcl8.5', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'ASL.LOG': 'Destination=file', 'ADSK_3DSMAX_X64_2015': 'C:\\Program Files\\Autodesk\\3ds Max 2015\\', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\windows', 'MLT_REPOSITORY': 'C:\\Program Files (x86)\\Jahshaka\\..\\mlt\\share\\mlt\\modules', 'TEMP': 'C:\\Users\\me\\AppData\\Local\\Temp', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'DXSDK_DIR': 'C:\\Program Files (x86)\\Microsoft DirectX SDK (June 2010)\\', 'COMSPEC': 'C:\\windows\\system32\\cmd.exe', 'NUMBER_OF_PROCESSORS': '4', 'APPDATA': 'C:\\Users\\me\\AppData\\Roaming', 'MINGW': 'C:\\TDM-GCC-64\\bin', 'PROCESSOR_LEVEL': '6', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\me'}